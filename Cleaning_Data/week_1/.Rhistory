time_analysis_sample_data <- data.frame(
dayseq,
domain = rep("test.cloud8labs", length(dayseq)),
version = c(rep("Trial", 5), rep("Basic", 5), rep("Enterprise", 5))
)
day.start <- "2012/10/01"
day.end <- "2013/01/07"
dayseq <- seq.Date(as.Date(day.start),as.Date(day.end),by="week")
weeks = length(dayseq)
time_analysis_sample_data <- data.frame(
dayseq,
domain = rep("test.cloud8labs", weeks),
version = c(rep("Trial", weeks / 3), rep("Basic", weeks / 3), rep("Enterprise", weeks / 3))
)
weeks = length(dayseq)
time_analysis_sample_data <- data.frame(
dayseq,
domain = rep("test.cloud8labs", weeks),
version = c(rep("Trial", weeks / 3), rep("Basic", weeks / 3), rep("Enterprise", weeks / 3))
reports_count = c(0, rep(1, 3), rep(3, 8), rep(5, 3))
)
day.start <- "2012/10/01"
day.end <- "2013/01/07"
dayseq <- seq.Date(as.Date(day.start),as.Date(day.end),by="week")
weeks = length(dayseq)
time_analysis_sample_data <- data.frame(
dayseq,
domain = rep("test.cloud8labs", weeks),
version = c(rep("Trial", weeks / 3), rep("Basic", weeks / 3), rep("Enterprise", weeks / 3)),
reports_count = c(0, rep(1, 3), rep(3, 8), rep(5, 3))
)
View(time_analysis_sample_data)
time_analysis_sample_data <- data.frame(
dayseq,
domain = rep("test.cloud8labs", weeks),
version = c(rep("Trial", weeks / 3), rep("Basic", weeks / 3), rep("Enterprise", weeks / 3)),
reports_count = c(0, rep(1, 3), rep(3, 8), rep(5, 3)),
man_syncs_run = c(3, 2, 4, rep(0, 3), rep(2, 3))
)
time_analysis_sample_data <- data.frame(
dayseq,
domain = rep("test.cloud8labs", weeks),
version = c(rep("Trial", weeks / 3), rep("Basic", weeks / 3), rep("Enterprise", weeks / 3)),
reports_count = c(0, rep(1, 3), rep(3, 8), rep(5, 3)),
man_syncs_run = c(3, 2, 2, 3, 4, rep(0, 5), rep(2, 5))
)
View(time_analysis_sample_data)
time_analysis_sample_data <- data.frame(
dayseq,
domain = rep("test.cloud8labs", weeks),
version = c(rep("Trial", weeks / 3), rep("Basic", weeks / 3), rep("Enterprise", weeks / 3)),
edu_non_prof = c(rep(FALSE, 15)),
reports_count = c(0, rep(1, 3), rep(3, 8), rep(5, 3)),
man_syncs_run = c(3, 2, 2, 3, 4, rep(0, 5), rep(2, 5)),
drive_policies_conut = c(rep(0, 2), rep(1, 8), rep(2, 5))
)
View(time_analysis_sample_data)
View(time_analysis_sample_data)
weeks_as_enterprise <- time_analysis_sample_data[time_analysis_sample_data$version == "Enterprise"]
weeks_as_enterprise <- time_analysis_sample_data[time_analysis_sample_data$version == "Enterprise", ]
View(weeks_as_enterprise)
?order
weeks_as_enterprise <- weeks_as_enterprise[order(weeks_as_enterprise$dayseq, decreasing = TRUE),]
View(weeks_as_enterprise)
weeks_as_enterprise <- weeks_as_enterprise[order(weeks_as_enterprise$dayseq),]
View(weeks_as_enterprise)
find_conversion_point <- function(time_analysis_sample_data){
weeks_as_enterprise <- time_analysis_sample_data[time_analysis_sample_data$version == "Enterprise", ]
weeks_as_enterprise <- weeks_as_enterprise[order(weeks_as_enterprise$dayseq),]
conversion_week <- weeks_as_enterprise[1]
}
find_conversion_point(time_analysis_sample_data)
conv_date <- find_conversion_point(time_analysis_sample_data)
conv_date
find_conversion_point <- function(time_analysis_sample_data){
weeks_as_enterprise <- time_analysis_sample_data[time_analysis_sample_data$version == "Enterprise", ]
weeks_as_enterprise <- weeks_as_enterprise[order(weeks_as_enterprise$dayseq),]
conversion_week <- weeks_as_enterprise[1]
}
conv_date
conv_date <- find_conversion_point(time_analysis_sample_data)
conv_date
find_conversion_point <- function(time_analysis_sample_data){
weeks_as_enterprise <- time_analysis_sample_data[time_analysis_sample_data$version == "Enterprise", ]
weeks_as_enterprise <- weeks_as_enterprise[order(weeks_as_enterprise$dayseq),]
conversion_week <- weeks_as_enterprise[1]
conversion_week
}
conv_date <- find_conversion_point(time_analysis_sample_data)
conv_date
View(weeks_as_enterprise)
find_conversion_point <- function(time_analysis_sample_data){
weeks_as_enterprise <- time_analysis_sample_data[time_analysis_sample_data$version == "Enterprise", ]
weeks_as_enterprise <- weeks_as_enterprise[order(weeks_as_enterprise$dayseq),]
conversion_week <- weeks_as_enterprise[1,]
conversion_week
}
conv_date <- find_conversion_point(time_analysis_sample_data)
conv_date
?seq.Date
dates <- seq.Date(from = conv_date, by = "-1 week", length.out = weeks)
View(conv_date)
dates <- seq.Date(from = conv_date$dayseq, by = "-1 week", length.out = weeks)
dates
View(conv_date)
dates <- seq.Date(from = conv_date$dayseq, by = "-1 week", length.out = 1)
dates
dates <- seq.Date(from = conv_date$dayseq, by = "-1 week", length.out = 4)
dates
find_difs_in_weeks_leading_up_to_conversion <- function(time_analysis_sample_data, weeks = 4) {
conv_date <- find_conversion_point(time_analysis_sample_data)
dates <- seq.Date(from = conv_date$dayseq, by = "-1 week", length.out = weeks)
dates
}
find_difs_in_weeks_leading_up_to_conversion(time_analysis_sample_data, 2)
find_difs_in_weeks_leading_up_to_conversion(time_analysis_sample_data, 4)
find_difs_in_weeks_leading_up_to_conversion(time_analysis_sample_data, 6)
find_difs_in_weeks_leading_up_to_conversion <- function(time_analysis_sample_data, weeks = 4) {
conv_date <- find_conversion_point(time_analysis_sample_data)
dates <- seq.Date(from = conv_date$dayseq, by = "-1 week", length.out = weeks)
data_leading_up_to_conversion <- time_analysis_sample_data[time_analysis_sample_data$dayseq %in% dates,]
data_leading_up_to_conversion
}
find_difs_in_weeks_leading_up_to_conversion(time_analysis_sample_data, 1)
find_difs_in_weeks_leading_up_to_conversion(time_analysis_sample_data, 2)
?rbind
data_leading_to_conversion <- function(time_analysis_sample_data, weeks = 4, include_conversion = FALSE) {
conv_date <- find_conversion_point(time_analysis_sample_data)
dates <- seq.Date(from = conv_date$dayseq, by = "-1 week", length.out = weeks)
data_leading_up_to_conversion <- time_analysis_sample_data[time_analysis_sample_data$dayseq %in% dates,]
if(include_conversion){
data_leading_up_to_conversion <- rbind(conv_date, data_leading_up_to_conversion)
}
data_leading_up_to_conversion
}
data_leading_up_to_conversion(time_analysis_sample_data)
data_leading_to_conversion(time_analysis_sample_data)
data_leading_to_conversion(time_analysis_sample_data, include_conversion = TRUE)
data_leading_to_conversion <- function(time_analysis_sample_data, weeks = 4) {
conv_date <- find_conversion_point(time_analysis_sample_data)
dates <- seq.Date(from = conv_date$dayseq, by = "-1 week", length.out = weeks)
data_leading_up_to_conversion <- time_analysis_sample_data[time_analysis_sample_data$dayseq %in% dates,]
data_leading_up_to_conversion
}
data_leading_to_conversion(time_analysis_sample_data)
conversion_data <- data_leading_to_conversion(time_analysis_sample_data)
mean(conversion_data$man_syncs_run)
sum(conversion_data$man_syncs_run) - mean(conversion_data$man_syncs_run)
sum(conversion_data$reports_count) - mean(conversion_data$reports_count)
average(conversion_data$reports_count) - mean(conversion_data$reports_count)
?Ave
?ave
ave(conversion_data$reports_count) - mean(conversion_data$reports_count)
mean(conversion_data$reports_count) - median(conversion_data$reports_count)
mean(conversion_data$man_syncs_run) - median(conversion_data$man_syncs_run)
library(httr)
install.packages("RForcecom", dependencies = TRUE)
library(jsonlite)
library("RForcecom")
options(stringsAsFactors = FALSE)
accounts_json <- GET("https://bettercloud.evergage.com/api/dataset/engage/accounts.json?_at=C2C0FC23-4A2A-9D7D-A831-E4B10644399D")
account_json_content <- content(accounts_json)
account_json_exposed <- jsonlite::fromJSON(toJSON(account_json_content))
#Load libraries and default stringsAsFactosToFalse
library(httr)
install.packages("RForcecom", dependencies = TRUE)
library(jsonlite)
library("RForcecom")
options(stringsAsFactors = FALSE)
install.packages("RForcecom", dependencies = TRUE)
accounts_json_resp <- GET("https://bettercloud.evergage.com/api/dataset/engage/accounts.json?_at=C2C0FC23-4A2A-9D7D-A831-E4B10644399D")
account_json_content <- content(accounts_json_resp)
account_json <- jsonlite::fromJSON(toJSON(account_json_content))
library(jsonlite)
library(httr)
install.packages("RForcecom", dependencies = TRUE)
library(jsonlite)
R.Version()
R.Version()
library(httr)
install.packages("RForcecom", dependencies = TRUE)
library(jsonlite)
R.library("RForcecom")
options(stringsAsFactors = FALSE)
library("RForcecom")
accounts_json_resp <- GET("https://bettercloud.evergage.com/api/dataset/engage/accounts.json?_at=C2C0FC23-4A2A-9D7D-A831-E4B10644399D")
account_json_content <- content(accounts_json_resp)
account_json <- jsonlite::fromJSON(toJSON(account_json_content))
username <- "david.hardwick@bettercloud.com.sandbox"
password <- "B3tterc!oud2013gd6hCzFDyaw9HQetrPEy1dqr2"
instanceURL <- "https://cs9.salesforce.com/"
apiVersion <- "27.0"
session <- rforcecom.login(username, password, instanceURL, apiVersion)
soql_query <- "SELECT Name, Flashpanel_Version__c, last_login__c, num_saved_report__c, num_scheduled_policies__c, num_scheduled_report__c FROM Account"
query_result <- rforcecom.query(session, soql_query)
query_result <- query_result[!is.na(query_result$last_login__c),]
domains <- query_result$Name
View(account_json)
View(query_result)
evergage_data_for_sf_accounts <- account_json_exposed[account_json_exposed$name %in% domains,]
evergage_domains <- evergage_data_for_sf_accounts$name
evergage_data_for_sf_accounts$name <- lapply(evergage_data_for_sf_accounts$name, as.character)
evergage_data_for_sf_accounts$totalActions <- lapply(evergage_data_for_sf_accounts$totalActions, as.numeric)
evergage_data_for_sf_accounts <- account_json_exposed[account_json_exposed$name %in% domains,]
evergage_data_for_sf_accounts <- account_json_exposed[account_json$name %in% domains,]
evergage_data_for_sf_accounts <- account_json[account_json$name %in% domains,]
evergage_domains <- evergage_data_for_sf_accounts$name
evergage_data_for_sf_accounts$name <- lapply(evergage_data_for_sf_accounts$name, as.character)
evergage_data_for_sf_accounts$totalActions <- lapply(evergage_data_for_sf_accounts$totalActions, as.numeric)
evergage_data_for_sf_accounts$name <- unlist(evergage_data_for_sf_accounts$name)
evergage_data_for_sf_accounts$totalActions <- unlist(evergage_data_for_sf_accounts$totalActions)
query_result <- query_result[query_result$Name %in% evergage_data_for_sf_accounts$name,]
View(evergage_data_for_sf_accounts)
View(query_result)
query_result$Name <- as.character(query_result$Name)
query_result <-query_result[order(query_result$Name), ]
View(evergage_data_for_sf_accounts)
View(query_result)
data <- data.frame(evergage_data_for_sf_accounts$name, evergage_data_for_sf_accounts$totalActions, query_result$Name,
query_result$last_login__c, query_result$num_saved_report__c,
query_result$num_scheduled_policies__c, query_result$num_scheduled_report__c)
colnames(data) <- c("E - Name", "E - Total Actions", "S - Name", "S - Last Login", "S - Saved Report Count", "S - Scheduled Policy Count", "S - Scheduled Report Count")
View(data)
day.start <- "2012/10/01"
day.end <- "2013/01/07"
dayseq <- seq.Date(as.Date(day.start),as.Date(day.end),by="week")
weeks = length(dayseq)
time_analysis_sample_data <- data.frame(
dayseq,
domain = rep("test.cloud8labs", weeks),
version = c(rep("Trial", weeks / 3), rep("Basic", weeks / 3), rep("Enterprise", weeks / 3)),
edu_non_prof = c(rep(FALSE, 15)),
reports_count = c(0, rep(1, 3), rep(3, 8), rep(5, 3)),
man_syncs_run = c(3, 2, 2, 3, 4, rep(0, 5), rep(2, 5)),
drive_policies_conut = c(rep(0, 2), rep(1, 8), rep(2, 5))
)
View(time_analysis_sample_data)
find_trial_end <- fucntion(time_analysis_sample_data) {
weeks_as_trial <- time_analysis_sample_data[time_analysis_sample_data$version == "Trial", ]
weeks_as_trial <- weeks_as_trial[order(weeks_as_trial$dayseq),]
trial_end_week <- weeks_as_trial[nrow(weeks_as_trial),]
trial_end_week
}
find_conversion_point <- function(time_analysis_sample_data){
weeks_as_enterprise <- time_analysis_sample_data[time_analysis_sample_data$version == "Enterprise", ]
weeks_as_enterprise <- weeks_as_enterprise[order(weeks_as_enterprise$dayseq),]
conversion_week <- weeks_as_enterprise[1,]
conversion_week
}
data_leading_to_conversion <- function(time_analysis_sample_data, weeks = 4) {
conv_date <- find_conversion_point(time_analysis_sample_data)
dates <- seq.Date(from = conv_date$dayseq, by = "-1 week", length.out = weeks)
data_leading_up_to_conversion <- time_analysis_sample_data[time_analysis_sample_data$dayseq %in% dates,]
data_leading_up_to_conversion
}
find_trial_end <- fucntion(time_analysis_sample_data) {
weeks_as_trial <- time_analysis_sample_data[time_analysis_sample_data$version == "Trial", ]
weeks_as_trial <- weeks_as_trial[order(weeks_as_trial$dayseq),]
trial_end_week <- weeks_as_trial[nrow(weeks_as_trial),]
trial_end_week
}
find_trial_end <- function(time_analysis_sample_data) {
weeks_as_trial <- time_analysis_sample_data[time_analysis_sample_data$version == "Trial", ]
weeks_as_trial <- weeks_as_trial[order(weeks_as_trial$dayseq),]
trial_end_week <- weeks_as_trial[nrow(weeks_as_trial),]
trial_end_week
}
library(httr)
install.packages("RForcecom", dependencies = TRUE)
library(jsonlite)
library("RForcecom")
options(stringsAsFactors = FALSE)
install.packages("RForcecom", dependencies = TRUE)
accounts_json_resp <- GET("https://bettercloud.evergage.com/api/dataset/engage/accounts.json?_at=C2C0FC23-4A2A-9D7D-A831-E4B10644399D")
account_json_content <- content(accounts_json_resp)
account_json <- jsonlite::fromJSON(toJSON(account_json_content))
setwd("~/Workspace/Coursera/Cleaning_Data/week_1")
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
setwd("~/Workspace/Coursera/Cleaning_Data/week_1")
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile="cameras.csv", method = "curl")
list.files()
date_downloaded <- date()
cameraData <- read.table("cameras.csv")
cameraData <- read.table("cameras.csv", sep = ",", header = TRUE)
head(cameraData)
cameraData <- read.csv("cameras.csv")
head(cameraData)
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.xlsx?accessType=DOWNLOAD"
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.xlsx?accessType=DOWNLOAD"
download.file(fileUrl, destfile = "cameras.xslx", method="curl")
dateDownloaded <- date()
library(xlsx)
cameraData <- read.xlsx("cameras.xlsx", sheetIndex=1,header=TRUE)
download.file(fileUrl, destfile = "cameras.xlsx", method="curl")
cameraData <- read.xlsx("cameras.xlsx", sheetIndex=1,header=TRUE)
head(cameraData)
cameraDataSubset <- read.xlsx("cameras.xlsx", sheetIndex = 1, colIndex = colIndex, rowIndex = rowIndex)
colIndex <- 2:3
rowIndex <- 1:4
cameraDataSubset <- read.xlsx("cameras.xlsx", sheetIndex = 1, colIndex = colIndex, rowIndex = rowIndex)
cameraDataSubset
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileIrl, useInternalNodes = TRUE)
doc <- xmlTreeParse(fileUrl, useInternalNodes = TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[1][1]
rootNode[[1]][[1]]
xmlSApply(rootNode, xmlValue)
xpathSApply(rootNode, "//name", xmlValue)
xpathSApply(rootNode, "//price", xmlValue)
fileUrl <- "http://espn.go.com/nfl/team/_/name/bal/baltimore_ravens"
doc <- htmlTreeParse(fileUrl, useInternalNodes = TRUE)
scores <- xpathSApply(doc, "//li[@class='score", xmlValue)
scores <- xpathSApply(doc, "//li[@class='score']", xmlValue)
scores
teams <- xpathSApply(doc, "//li[@class='team-name']", xmlValue)
teams
library(jsonlite)
jsonData <- fromJSON("https://https://api.github.com/users/jtleek/repos")
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
names(jsonData$owner)
jsonData$owner$login
myjosn <- toJSON(iris, pretty = TRUE)
myjosn <- toJSON(iris, pretty = TRUE)
cat(myjson)
myjson <- toJSON(iris, pretty = TRUE)
cat(myjson)
iris2 <- fromJSON(myjson)
head(iris2)
library(data.table)
DF = data.frame(x=rnorm(9),y=rep(c("a","b","c"), each=3), z=rnorm(9))
head(DF,3)
DT = table(x=rnorm(9),y=rep(c("a","b","c"), each=3), z=rnorm(9))
head(DF,3)
tables()
?tables
DT
head(DT,3)
xDT = table(x=rnorm(9),y=rep(c("a","b","c"), each=3), z=rnorm(9))
DT = table(x=rnorm(9),y=rep(c("a","b","c"), each=3), z=rnorm(9))
head(DT,3)
DT
DT = data.table(x=rnorm(9),y=rep(c("a","b","c"), each=3), z=rnorm(9))
tables()
head(DT,3)
DT[,w:=z^2]
DT
set.seed(123)
DT[, .N, by=x]
DT <- data.table(x=sample(letters[1:3], 1E5, TRUE))
DT[, .N, by=x]
DT <- data.table(x=rep(c("a","b","c"), each=100), y=rnorm(300)))
DT <- data.table(x=rep(c("a","b","c"), each=100), y=rnorm(300))
setkey(DT, x)
DT['a']
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.csv(fileUrl, destfile = "community.csv", method = curl)
download.file(fileUrl, destfile = "community.csv", method = curl)
download.file(fileUrl, destfile = "community.csv", method = "curl")
comm <- read.csv("community.csv")
names(comm)
mil_prop <- comm[comm$VAL == 24,]
View(mil_prop)
View(comm)
class(comm$VAL)
mil_prop <- comm[,comm$VAL == 24]
mil_prop <- comm[comm$VAL == 24, comm$VAL]
mil_prop <- comm[comm$VAL == 24,]
mil_prop <- comm[comm$VAL > 23,]
mil_prop <- comm[comm$VAL == 1,]
)
head(mil_prop)
prop_vals <- comm$VAL
head(prop_vals)
prop_vals <- prop_vals[!is.na(prop_vals)]
prop_vals
mil_dol_props <- prop_vals[prop_vals == 24]
download.file(fileUrl, destfile = "nat_gas", method = "curl")
library(xlsx)
download.file(fileUrl, destfile = "nat_gas.xlsx", method = "curl")
nat_gas_data <- read.xlsx("nat_gas.xlsx", sheetIndex = 1, header = TRUE)
download.file(fileUrl, destfile = "nat_gas.xlsx", method = "curl")
library(xlsx)
nat_gas_data <- read.xlsx("nat_gas.xlsx", sheetIndex = 1, header = TRUE)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileUrl, destfile = "nat_gas.xlsx", method = "curl")
nat_gas_data <- read.xlsx("nat_gas.xlsx", sheetIndex = 1, header = TRUE)
dat <- nat_gas_data[18:23, 7:15]
dat
View(dat)
View(nat_gas_data)
View(nat_gas_data)
nat_gas_data <- read.xlsx("nat_gas.xlsx", sheetIndex = 1, header = TRUE)
View(nat_gas_data)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileUrl, destfile = "nat_gas.xlsx", method = "curl")
library(xlsx)
nat_gas_data <- read.xlsx("nat_gas.xlsx", sheetIndex = 1, header = TRUE)
View(nat_gas_data)
nat_gas_data <- read.xlsx("nat_gas.xlsx", sheetIndex = 1, header = FALSE)
View(nat_gas_data)
?read.xlsm
?read.xlsx
nat_gas_data <- read.xlsx("nat_gas.xlsx", sheetIndex = 1, header = TRUE, startRow = 2)
View(nat_gas_data)
dat <- nat_gas_data[18:23, 7:15]
dat <- nat_gas_data[18:23, 7:15]
View(dat)
View(nat_gas_data)
dat <- nat_gas_data[18:23, 7:15]
View(dat)
colIndex = 18:23
rowIndex = 7:15
nat_gas_subset <- read.xlsx("nat_gas.xlsx", sheetIndex = 1, colIndex = colIndex, rowIndex = rowIndex)
colIndex <- 18:23
rowIndex <- 7:15
nat_gas_subset <- read.xlsx("nat_gas.xlsx", sheetIndex = 1, colIndex = colIndex, rowIndex = rowIndex)
nat_gas_subset <- read.xlsx("nat_gas.xlsx", sheetIndex = 1, colIndex = colIndex, rowIndex = rowIndex, header = TRUE, startRow = 2)
nat_gas_data <- read.xlsx("nat_gas.xlsx", sheetIndex = 1, header = TRUE, startRow = 2)
nat_gas_subset <- read.xlsx("nat_gas.xlsx", sheetIndex = 1, header = TRUE, startRow = 2)
nat_gas_subset <- read.xlsx("nat_gas.xlsx", sheetIndex = 1, header = TRUE, colIndex = colIndex, startRow = 2)
View(nat_gas_subset)
nat_gas_data <- read.xlsx("nat_gas.xlsx", sheetIndex = 1, header = TRUE, startRow = 2)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileUrl, destfile = "nat_gas.xlsx", method = "curl")
nat_gas_data <- read.xlsx("nat_gas.xlsx", sheetIndex = 1, header = TRUE, startRow = 2)
nat_gas_subset <- read.xlsx("nat_gas.xlsx", sheetIndex = 1, header = TRUE, colIndex = colIndex, startRow = 2)
View(nat_gas_subset)
nat_gas_subset <- read.xlsx("nat_gas.xlsx", sheetIndex = 1, header = TRUE, rowIndex = rowIndex, startRow = 2)
View(nat_gas_subset)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileUrl, destfile = "nat_gas.xlsx", method = "curl")
library(xlsx)
nat_gas_data <- read.xlsx("nat_gas.xlsx", sheetIndex = 1, header = TRUE, startRow = 2)
View(nat_gas_data)
rowIndex <- 18:23
row_subset <- nat_gas_data[rowIndex,]
row_col_subset <- row_subset[,7:15]
View(row_col_subset)
col_subset <- nat_gas_data[, 7:15]
colnames(row_col_subset) <- names(col_subset)
View(row_col_subset)
View(col_subset)
View(nat_gas_data)
View(nat_gas_data)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileUrl, destfile = "nat_gas.xlsx", method = "curl")
nat_gas_data <- read.xlsx("nat_gas.xlsx", sheetIndex = 1, header = TRUE)
View(nat_gas_data)
, startRow = 2
View(nat_gas_data)
nat_gas_data <- read.xlsx("nat_gas.xlsx", sheetIndex = 1, header = TRUE, startRow = 2)
View(nat_gas_data)
nat_gas_data <- read.xlsx("nat_gas.xlsx", sheetName = "NGAP", header = TRUE, startRow = 2)
nat_gas_data <- read.xlsx("nat_gas.xlsx", sheetName = "NGAP Sample Data", header = TRUE, startRow = 2)
View(nat_gas_data)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileUrl, destfile = "nat_gas.xlsx", method = "curl")
nat_gas_data <- read.xlsx("nat_gas.xlsx", sheetName = "NGAP Sample Data", header = TRUE)
View(nat_gas_data)
View(nat_gas_data)
View(nat_gas_data)
nat_gas_data <- read.xlsx("nat_gas.xlsx", sheetIndex = 1, header = TRUE)
View(nat_gas_data)
rowIndex <- 18:23
colIndex <- 7:15
nat_gas_data <- read.xlsx("nat_gas.xlsx", rowIndex = rowIndex, colIndex = colIndex, sheetIndex = 1, header = TRUE)
View(nat_gas_data)
sum(nat_gas_data$Zip*nat_gas_data$Ext,na.rm=T)
library(xml)
library(XML)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
rootNode <- xmlTreeParse(fileUrl, useInternalNodes = TRUE)
doc <- xmlTreeParse(fileUrl, useInternalNodes = TRUE)
doc <- xmlTreeParse(fileUrl)
doc <- xmlTreeParse(fileUrl, useInternalNodes = TRUE, isUrl = TRUE)
fileUrl <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileUrl, useInternalNodes = TRUE)
root_node <- xmlRoot(doc)
names(root_node)
xmlSApply(rootNode, xmlValue)
root_node <- xmlRoot(doc)
xmlSApply(root_node, xmlValue)
root_node[[1]]
xmlSApply(root_node, "//zipcode", xmlValue)
xpathApply(root_node, "//zipcode", xmlValue)
zip_codes <- xpathApply(root_node, "//zipcode", xmlValue)
21231_zip_codes <- zip_codes[zip_codes == 21231]
21231_zip_codes <- zip_codes[zip_codes == "21231"]
subset_zip_codes <- zip_codes[zip_codes == "21231"]
download.file(fileUrl, destfile = "comm.csv", method = "curl")
?fread
DT <- fread(comm.csv)
DT <- fread("comm.csv")
DT <- fread("comm.csv", sep = ",")
DT <- fread("comm.csv")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrl, destfile = "community.csv", method = "curl")
DT <- fread("community.csv")
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time(rowMeans(DT)[DT$SEX==1]) + system.time(rowMeans(DT)[DT$SEX==2])
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(mean(DT[DT$SEX==1,]$pwgtp15)) + system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(mean(DT$pwgtp15,by=DT$SEX))
