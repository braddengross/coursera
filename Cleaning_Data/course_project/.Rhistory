xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
cited_by <- xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
cited_by
html
cited_by <- xpathSApply(html, "//td[@id='gsc_a_c']", xmlValue)
cited_by <- xpathSApply(html, "//td[@id='gsc_a_c']", xmlValue)
cited_by
xpathSApply(html, "//td[@id='gsc_a_c']", xmlValue)
library(httr)
html2 <= GET(url)
html2 <- GET(url)
content2 <- content(html2, as="text")
parsedHtml <- htmlParse(content2, asText = TRUE)
xpathSApply(parsedHtml, "//title", xmlValue)
pg1 = GET("http://httpbin.org/basic-auth/user/passwd")
pg1
pg1 = GET("http://httpbin.org/basic-auth/user/passwd",
authenticate("uesr","password"))
pg1
pg1 = GET("http://httpbin.org/basic-auth/user/passwd",
authenticate("user","password"))
pg1
pg1 = GET("http://httpbin.org/basic-auth/user/passwd",
authenticate("user","passwd"))
pg1
names(pg1)
#Using handles
google = handle("http://google.com")
pg1 = GET(handle=google, path="/")
pg1
pg2 = GET(handle=google, path="search")
pg2
library(httr)
oauth_endpoints("github")
oauth_endpoints("github")
?oauth_app
myapp <- oauth_app("github", "f4a0559a529d341e8964", "6cabb8b2ea01d6d0659266adbea7baab157070d9")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
reqContent <- content(req)
reqContent <- content(req, as="text")
parsedHtml <- htmlParse(reqContent, asText = TRUE)
xpathSApply(parsedHtml, "//name", xmlValue)
xpathSApply(parsedHtml, "//$name", xmlValue)
xpathSApply(parsedHtml, "//name", xmlValue)
xpathSApply(parsedHtml, "//name", jsonValue)
xpathSApply(parsedHtml, "//name", value)
rootNode <- xmlRoot(reqContent)
rootNode <- xmlRoot(parsedHtml)
rootNode
v
names(rootNode)
names(parsedHtml)
parsedHtml <- htmlParse(reqContent, asText = TRUE)
xpathSApply(parsedHtml, xmlValue)
xpathSApply(parsedHtml, "//", xmlValue)
parsedHtml
xpathSApply(parsedHtml, "//name", xmlValue)
names <- xpathSApply(parsedHtml, "//name", xmlValue)
install.packages("RMySQL")
require("RMySQL")
?dbConnect
asc <- dbConnect(MySQL(), host="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
install.packages("sqldf")
require("sqldf")
?read.csv
asc <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
names(asc)
asc <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
?download.file
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", destFile="acs.csv",method="curl")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", destfile="acs.csv",method="curl")
asc <- read.csv("asc.csv")
asc <- read.csv("acs.csv")
names(asc)
sqldf("select pwgtp1 from acs where AGEP < 50")
read.csv.sql("asc.csv", "select pwgtp1 from acs where AGEP < 50")
sqldf("select pwgtp1 from acs where AGEP < 50")
sqldf("select pwgtp1 from asc where AGEP < 50")
class(asc)
sqldf("select * from asc")
install.packages("sqldf")
options(sqldf.driver = "SQLite") # as per FAQ #7 force SQLite
options(gsubfn.engine = "R") # as per FAQ #5 use R code rather than tcltk
library(RMySQL)
library(sqldf)
sqldf("select * from asc")
sqldf("select pwgtp1 from asc where AGEP < 50")
sqldf("select distinct AGEP from acs")
sqldf("select distinct AGEP from asc")
sqldf("select unique AGEP from asc")
#Question 3 (cont'd from question 2)
library(httr)
url <- "http://biostat.jhsph.edu/~jleek/contact.html "
html2 <- GET(url)
content2 <- content(html2, as="text")
parsedHtml <- htmlParse(content2, asText = TRUE)
pasedHtml
parsedHtml
class(parsedHtml)
line10 <- parsedHtml[10]
line10 <- parsedHtml[10,0]
library(XML)
htmlTable <- readHTMLTable(parsedHtml)
htmlTable
parsedHtml
url <- "http://biostat.jhsph.edu/~jleek/contact.html "
con = url(url)
htmlCode = readLines(con)
close(con)
htmlCode
line10 <- htmlCode[10]
line10 <- nchar(htmlCode[10])
line10 <- nchar(htmlCode[10])
line20 <- nchar(htmlCode[20])
line30 <- nchar(htmlCode[30])
line100 <- nchar(htmlCode[100])
?read.fwf
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", destfile = "fwf.for")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", destfile = "fwf.for")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", destfile = "fwf.for", method ="curl")
data <- read.fwf("fwf.for", widths = 1)
data
data <- read.fwf("fwf.for", widths = 2)
data
data <- read.fwf("fwf.for", widths = 29)
data <- read.fwf("fwf.for", widths = 9)
data
data <- read.fwf("fwf.for", widths = 1000)
data
data <- read.fwf(
data <- read.fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
class(data)
sum(data$V4)
sum(data$V9)
sum(data$V4) + sum(data$V9)
View(data)
sum(data$V4)
sum(data$V3)
sum(data$V5)
data <- read.fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=4,
widths=c(14, 4,9, 4,9, 4,9, 4,9))
head(1, data)
head(data, 1)
sum(data$V4)
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarise(cran, mean(size))
summarise(by_package, mean(size))
summarize(by_package, mean(size))
pack_sum
pack_sum <- summarize(by_package,
count = ,
unique = ,
countries = ,
avg_bytes = )
?n
count = n()
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = .99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = .99)
top_unique <- filter(pack_sum, unique > 465)
top_unique
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
cran %>%
select(ip_id, country, package, size) %>%
print
sdaf
cran
swirl()
nxt()
submit()
cran %>%
select(ip_id, country, package, size) %>%
print
nxt()
submit()
reset()
submit()
nxt()
submit()
reset()
submit()
submit()
reset
reset()
submit()
submit()
submit()
submit()
library(tidyr)
reset()
swirl()
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, column count)
res <- gather(students2, sex_class, column_count)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(data = res, col = sex_class, into = c("sex", "class"))
submit()
submit()
students3
submit()
submit()
?spread
submit()
submit()
submit()
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(name,test) %>%
print
spread(test,test) %>%
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test,test) %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test,test) %>%
print
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(name,test) %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(name,class) %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(name,grade) %>%
print
students3
reset()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(name,test) %>%
print
students3
setwd("~/Workspace/Coursera/Cleaning_Data")
library(dplyr)
activity_labels <- read.table("./data/activity_labels.txt")
training_set <- read.table("./data/train/X_train.txt")
training_labels <- read.table("./data/train/y_train.txt")
training_subject <- read.table("./data/train/subject_train.txt")
test_set <- read.table("./data/test/X_test.txt")
test_labels <- read.table("./data/test/y_test.txt")
testing_subject <- read.table("./data/test/subject_test.txt")
features <- read.table("./data/features.txt")
colnames(test_set) <- features$V2
colnames(training_set) <- features$V2
#Full data set. Does it have duplicate column headers?
data_set <- rbind(test_set, training_set)
data_labels <- rbind(test_labels, training_labels)
##Convert data labels intro readable text using the activity labels df
mean_data_set <- data_set[ , grepl("-mean()", colnames(data_set))]
std_data_set <- data_set[ , grepl("-std()", colnames(data_set))]
mean_std_dataset <- cbind(mean_data_set, std_data_set)
mean_std_dataset <- cbind(data_labels, mean_std_dataset)
activities <- mean_std_dataset[,1]
activities <- as.character(activities)
activity_labels$V2 <- as.character(activity_labels$V2)
for(i in 1:length(activities)){
activity <- activity_labels[activity_labels$V1 == activities[i], 2]
activities[i] <- activity
}
pretty_mean_std_dataset <- cbind(activities, mean_std_dataset)
library(dplyr)
activity_labels <- read.table("./data/activity_labels.txt")
setwd("~/Workspace/Coursera/Cleaning_Data/course_project")
activity_labels <- read.table("./data/activity_labels.txt")
training_set <- read.table("./data/train/X_train.txt")
training_labels <- read.table("./data/train/y_train.txt")
training_subject <- read.table("./data/train/subject_train.txt")
test_set <- read.table("./data/test/X_test.txt")
test_labels <- read.table("./data/test/y_test.txt")
testing_subject <- read.table("./data/test/subject_test.txt")
features <- read.table("./data/features.txt")
colnames(test_set) <- features$V2
colnames(training_set) <- features$V2
#Full data set. Does it have duplicate column headers?
data_set <- rbind(test_set, training_set)
data_labels <- rbind(test_labels, training_labels)
##Convert data labels intro readable text using the activity labels df
mean_data_set <- data_set[ , grepl("-mean()", colnames(data_set))]
std_data_set <- data_set[ , grepl("-std()", colnames(data_set))]
mean_std_dataset <- cbind(mean_data_set, std_data_set)
mean_std_dataset <- cbind(data_labels, mean_std_dataset)
activities <- mean_std_dataset[,1]
activities <- as.character(activities)
activity_labels$V2 <- as.character(activity_labels$V2)
for(i in 1:length(activities)){
activity <- activity_labels[activity_labels$V1 == activities[i], 2]
activities[i] <- activity
}
pretty_mean_std_dataset <- cbind(activities, mean_std_dataset)
View(pretty_mean_std_dataset)
View(data_labels)
activity_labels <- read.table("./data/activity_labels.txt")
features <- read.table("./data/features.txt")
test_set <- read.table("./data/test/X_test.txt")
test_labels <- read.table("./data/test/y_test.txt")
training_set <- read.table("./data/train/X_train.txt")
training_labels <- read.table("./data/train/y_train.txt")
training_subject <- read.table("./data/train/subject_train.txt")
testing_subject <- read.table("./data/test/subject_test.txt")
colnames(test_set) <- features$V2
View(test_labels)
colnames(test_set) <- features$V2
View(test_set)
data_set <- rbind(test_set, training_set)
data_labels <- rbind(test_labels, training_labels)
mean_data_set <- data_set[ , grepl("-mean()", colnames(data_set))]
std_data_set <- data_set[ , grepl("-std()", colnames(data_set))]
data_set <- rbind(test_set, training_set)
colnames(training_set) <- features$V2
data_set <- rbind(test_set, training_set)
data_labels <- rbind(test_labels, training_labels)
mean_data_set <- data_set[ , grepl("-mean()", colnames(data_set))]
std_data_set <- data_set[ , grepl("-std()", colnames(data_set))]
mean_std_dataset <- cbind(mean_data_set, std_data_set)
mean_std_dataset <- cbind(data_labels, mean_std_dataset)
View(mean_std_dataset)
activities <- mean_std_dataset[,1]
activities <- as.character(activities)
activity_labels$V2 <- as.character(activity_labels$V2)
for(i in 1:length(activities)){
activity <- activity_labels[activity_labels$V1 == activities[i], 2]
activities[i] <- activity
}
mean_std_dataset$V1 <- activities
View(mean_std_dataset)
View(mean_std_dataset)
colnames(mean_std_dataset) <- c("Activity", features$V2)
View(features)
?colnames
View(mean_std_dataset)
mean_data_set <- data_set[ , grepl("-mean()", colnames(data_set))]
std_data_set <- data_set[ , grepl("-std()", colnames(data_set))]
mean_std_dataset <- cbind(mean_data_set, std_data_set)
View(mean_std_dataset)
colnames(data_labels) <- "Activity"
mean_std_dataset <- cbind(data_labels, mean_std_dataset)
View(mean_std_dataset)
mean_std_dataset$Activity <- activities
View(mean_std_dataset)
?write.table
write.table(mean_std_dataset, file="run_analysis.txt", row.name = FALSE)
View(mean_std_dataset)
View(data_set)
View(training_set)
View(mean_std_dataset)
write.table(mean_std_dataset, file="small_run_analysis.txt", row.name = FALSE)
small_data_set <- mean_std_dataset[,2]
write.table(small_data_set, file="small_run_analysis.txt", row.name = FALSE)
small_data_set <- mean_std_dataset[,1:3]
write.table(small_data_set, file="small_run_analysis.txt", row.name = FALSE)
names(mean_data_set)
names(mean_std_dataset)
#Add subjects to columns
test_set <- cbind(testing_subject, test_set)
training_set <- cbind(training_subject, training_set)
View(test_set)
colnames(testing_subject) <- "Subject"
colnames(training_subject) <- "Subject"
test_set <- cbind(testing_subject, test_set)
training_set <- cbind(training_subject, training_set)
View(test_set)
activity_labels <- read.table("./data/activity_labels.txt")
features <- read.table("./data/features.txt")
test_set <- read.table("./data/test/X_test.txt")
test_labels <- read.table("./data/test/y_test.txt")
training_set <- read.table("./data/train/X_train.txt")
training_labels <- read.table("./data/train/y_train.txt")
training_subject <- read.table("./data/train/subject_train.txt")
testing_subject <- read.table("./data/test/subject_test.txt")
colnames(test_set) <- features$V2
colnames(training_set) <- features$V2
colnames(testing_subject) <- "Subject"
colnames(training_subject) <- "Subject"
test_set <- cbind(testing_subject, test_set)
training_set <- cbind(training_subject, training_set)
View(training_set)
View(test_set)
data_set <- rbind(test_set, training_set)
data_labels <- rbind(test_labels, training_labels)
colnames(data_labels) <- "Activity"
mean_data_set <- data_set[ , grepl("-mean()", colnames(data_set))]
std_data_set <- data_set[ , grepl("-std()", colnames(data_set))]
mean_std_dataset <- cbind(mean_data_set, std_data_set)
mean_std_dataset <- cbind(data_labels, mean_std_dataset)
activities <- mean_std_dataset[,1]
activities <- as.character(activities)
activity_labels$V2 <- as.character(activity_labels$V2)
for(i in 1:length(activities)){
activity <- activity_labels[activity_labels$V1 == activities[i], 2]
activities[i] <- activity
}
mean_std_dataset$Activity <- activities
View(mean_std_dataset)
subjects <- rbind(testing_subject, training_subject)
View(subjects)
Extract column names
colnames(test_set) <- features$V2
colnames(training_set) <- features$V2
#Add subjects to columns
colnames(testing_subject) <- "Subject"
colnames(training_subject) <- "Subject"
subjects <- rbind(testing_subject, training_subject)
test_set <- cbind(testing_subject, test_set)
training_set <- cbind(training_subject, training_set)
#Bind data set
data_set <- rbind(test_set, training_set)
data_labels <- rbind(test_labels, training_labels)
colnames(data_labels) <- "Activity"
mean_data_set <- data_set[ , grepl("-mean()", colnames(data_set))]
std_data_set <- data_set[ , grepl("-std()", colnames(data_set))]
mean_std_dataset <- cbind(mean_data_set, std_data_set)
mean_std_dataset <- cbind(data_labels, mean_std_dataset)
mean_std_dataset <- cbind(subjects, mean_std_dataset)
activities <- mean_std_dataset[,1]
activities <- as.character(activities)
activity_labels$V2 <- as.character(activity_labels$V2)
for(i in 1:length(activities)){
activity <- activity_labels[activity_labels$V1 == activities[i], 2]
activities[i] <- activity
}
mean_std_dataset$Activity <- activities
View(mean_std_dataset)
library(dplyr)
#Load all nexessary files
activity_labels <- read.table("./data/activity_labels.txt")
features <- read.table("./data/features.txt")
test_set <- read.table("./data/test/X_test.txt")
test_labels <- read.table("./data/test/y_test.txt")
training_set <- read.table("./data/train/X_train.txt")
training_labels <- read.table("./data/train/y_train.txt")
training_subject <- read.table("./data/train/subject_train.txt")
testing_subject <- read.table("./data/test/subject_test.txt")
colnames(test_set) <- features$V2
colnames(training_set) <- features$V2
colnames(testing_subject) <- "Subject"
colnames(training_subject) <- "Subject"
subjects <- rbind(testing_subject, training_subject)
test_set <- cbind(testing_subject, test_set)
training_set <- cbind(training_subject, training_set)
data_set <- rbind(test_set, training_set)
data_labels <- rbind(test_labels, training_labels)
colnames(data_labels) <- "Activity"
mean_data_set <- data_set[ , grepl("-mean()", colnames(data_set))]
std_data_set <- data_set[ , grepl("-std()", colnames(data_set))]
mean_std_dataset <- cbind(mean_data_set, std_data_set)
mean_std_dataset <- cbind(data_labels, mean_std_dataset)
mean_std_dataset <- cbind(subjects, mean_std_dataset)
View(mean_std_dataset)
activities <- mean_std_dataset[,2]
activities <- as.character(activities)
activity_labels$V2 <- as.character(activity_labels$V2)
for(i in 1:length(activities)){
activity <- activity_labels[activity_labels$V1 == activities[i], 2]
activities[i] <- activity
}
mean_std_dataset$Activity <- activities
View(mean_std_dataset)
unique(mean_std_dataset$Subject)
tidyDataset <- aggregate(mean_std_dataset, by=list(mean_std_dataset$subject, mean_std_dataset$activity), FUN=mean)
tidyDataset <- aggregate(mean_std_dataset, by=list(mean_std_dataset$Subject, mean_std_dataset$Activity), FUN=mean)
View(tidyDataset)
