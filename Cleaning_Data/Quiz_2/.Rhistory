if(chi > max_chi){
max_chi <- chi
date <- spreadsheets[i]
date <- gsub("data/", "", date)
date <- gsub(".csv", "", date)
date <- as.Date(date, "%m:%d:%Y")
max_chi_date <- as.character(date)
}
if(chi < min_chi){
min_chi <- chi
date <- spreadsheets[i]
date <- gsub("data/", "", date)
date <- gsub(".csv", "", date)
date <- as.Date(date, "%m:%d:%Y")
min_chi_date <- as.character(date)
}
m[j,1] <- domains_list[j]
m[j,2] <- max_chi_date
m[j,3] <- max_chi
m[j,4] <- min_chi_date
m[j,5] <- min_chi
}
}
colnames(m) <- c("Domain", "Max CHI Date","Max CHI", "Min CHI Date","Min CHI")
m
}
#Some basic plots
#plot(ch$Days.Since.Last.Login, ch$X.Scheduled.Policies)
#plot(ch$Days.Since.Last.Login, ch$X.Scheduled.reports)
#plot(ch$X..of.Admins.Active, ch$X..of.Access.Roles, log = "x")
get_chi_info_for_domains("brp.com")
setwd("~/Workspace/BetterCloud_R/chi/historic")
setAs("character","myDate", function(from) as.Date(from, format="%m/%d/%Y") )
#Coerce ACV into numbers without commas (I also removed all $ from the actual spreasheet)
setAs("character", "num_with_commas",
function(from) as.numeric(gsub(",", "", from) ) )
setwd("~/Workspace/BetterCloud_R/chi/historic")
historic <- read.csv("CHI Historic - Brad - Clean - Sheet1.csv", header = TRUE, stringsAsFactors = FALSE,
colClasses = c("character", "myDate", "numeric", "num_with_commas", rep("numeric", 18)))
summary(historic)
str(historic)
setwd("~/Workspace/CHI/chi_data/high_low")
weekly3 <- read.csv("01:04:2014.csv", header = TRUE, colClasses=c("character",
"numeric",
"num_with_commas",
"myDate",
rep("numeric",11),
"myDate", rep("numeric",39)))
weekly1 <- read.csv("12:21:2014.csv", header = TRUE, colClasses=c("character",
"numeric",
"num_with_commas",
"myDate",
rep("numeric",11),
"myDate", rep("numeric",39)))
weekly2 <- read.csv("12:28:2014.csv", header = TRUE, colClasses=c("character",
"numeric",
"num_with_commas",
"myDate",
rep("numeric",11),
"myDate", rep("numeric",39)))
summary(weekly)
str(weekly)
setwd("~/Workspace/BetterCloud_R/chi/historic")
#Coerce date strings into date objects
setAs("character","myDate", function(from) as.Date(from, format="%m/%d/%Y") )
#Coerce ACV into numbers without commas (I also removed all # from the actual spreasheet)
setAs("character", "num_with_commas",
function(from) as.numeric(gsub(",", "", from) ) )
df <- read.csv("CHI Historic - Brad - Clean - Sheet1.csv", header = TRUE, stringsAsFactors = FALSE,
colClasses = c("character", "myDate", "numeric", "num_with_commas", rep("numeric", 18)))
domain <- "newks.com"
domain2 <- "brp.com"
customer <- df[df$Domain.Name == domain,]
customer2 <- df[df$Domain.Name == domain2,]
unclean_dates <- names(customer[,c(5:22)])
dates <- as.Date(gsub("X", "", names(customer[,c(5:22)])), "%m.%d.%Y")
values <- as.numeric(customer[1, c(5:22)])
values2 <- as.numeric(customer2[1, c(5:22)])
plot(values~dates, type="l",col="red", axes=FALSE)
plot(values2~dates, type="l",col="blue", axes=FALSE)
box()
title(main = "Time Plot of CHI", sub = domain)
axis(1, dates, format(dates, "%m-%y"))
axis(2, values)
setwd("~/Workspace/BetterCloud_R/chi")
setAs("character","myDate", function(from) as.Date(from, format="%m/%d/%Y") )
#Coerce ACV into numbers without commas (I also removed all $ from the actual spreasheet)
setAs("character", "num_with_commas",
function(from) as.numeric(gsub(",", "", from) ) )
setwd("~/Workspace/BetterCloud_R/chi")
historic <- read.csv("/historic/CHI Historic - Brad - Clean - Sheet1.csv", header = TRUE, stringsAsFactors = FALSE,
colClasses = c("character", "myDate", "numeric", "num_with_commas", rep("numeric", 18)))
summary(historic)
str(historic)
weekly3 <- read.csv("/high_low/data/01:04:2014.csv", header = TRUE, colClasses=c("character",
"numeric",
"num_with_commas",
"myDate",
rep("numeric",11),
"myDate", rep("numeric",39)))
weekly1 <- read.csv("/high_low/data/12:21:2014.csv", header = TRUE, colClasses=c("character",
"numeric",
"num_with_commas",
"myDate",
rep("numeric",11),
"myDate", rep("numeric",39)))
weekly2 <- read.csv("/high_low/data/12:28:2014.csv", header = TRUE, colClasses=c("character",
"numeric",
"num_with_commas",
"myDate",
rep("numeric",11),
"myDate", rep("numeric",39)))
summary(weekly)
str(weekly)
weekly3 <- read.csv("/high_low/data/01:04:2014.csv", header = TRUE, colClasses=c("character",
"numeric",
"num_with_commas",
"myDate",
rep("numeric",11),
"myDate", rep("numeric",39)))
historic <- read.csv("/historic/CHI Historic - Brad - Clean - Sheet1.csv", header = TRUE, stringsAsFactors = FALSE,
colClasses = c("character", "myDate", "numeric", "num_with_commas", rep("numeric", 18)))
historic <- read.csv("historic/CHI Historic - Brad - Clean - Sheet1.csv", header = TRUE, stringsAsFactors = FALSE,
colClasses = c("character", "myDate", "numeric", "num_with_commas", rep("numeric", 18)))
View(historic)
setAs("character","myDate", function(from) as.Date(from, format="%m/%d/%Y") )
#Coerce ACV into numbers without commas (I also removed all $ from the actual spreasheet)
setAs("character", "num_with_commas",
function(from) as.numeric(gsub(",", "", from) ) )
setwd("~/Workspace/BetterCloud_R/chi")
historic <- read.csv("historic/CHI Historic - Brad - Clean - Sheet1.csv", header = TRUE, stringsAsFactors = FALSE,
colClasses = c("character", "myDate", "numeric", "num_with_commas", rep("numeric", 18)))
summary(historic)
str(historic)
weekly3 <- read.csv("high_low/data/01:04:2014.csv", header = TRUE, colClasses=c("character",
"numeric",
"num_with_commas",
"myDate",
rep("numeric",11),
"myDate", rep("numeric",39)))
weekly1 <- read.csv("high_low/data/12:21:2014.csv", header = TRUE, colClasses=c("character",
"numeric",
"num_with_commas",
"myDate",
rep("numeric",11),
"myDate", rep("numeric",39)))
weekly2 <- read.csv("high_low/data/12:28:2014.csv", header = TRUE, colClasses=c("character",
"numeric",
"num_with_commas",
"myDate",
rep("numeric",11),
"myDate", rep("numeric",39)))
summary(weekly)
str(weekly)
setAs("character","myDate", function(from) as.Date(from, format="%m/%d/%Y") )
#Coerce ACV into numbers without commas (I also removed all $ from the actual spreasheet)
setAs("character", "num_with_commas",
function(from) as.numeric(gsub(",", "", from) ) )
setwd("~/Workspace/BetterCloud_R/chi")
historic <- read.csv("historic/CHI Historic - Brad - Clean - Sheet1.csv", header = TRUE, stringsAsFactors = FALSE,
colClasses = c("character", "myDate", "numeric", "num_with_commas", rep("numeric", 18)))
summary(historic)
str(historic)
weekly3 <- read.csv("high_low/data/01:04:2014.csv", header = TRUE, colClasses=c("character",
"numeric",
"num_with_commas",
"myDate",
rep("numeric",11),
"myDate", rep("numeric",39)))
weekly1 <- read.csv("high_low/data/12:21:2014.csv", header = TRUE, colClasses=c("character",
"numeric",
"num_with_commas",
"myDate",
rep("numeric",11),
"myDate", rep("numeric",39)))
weekly2 <- read.csv("high_low/data/12:28:2014.csv", header = TRUE, colClasses=c("character",
"numeric",
"num_with_commas",
"myDate",
rep("numeric",11),
"myDate", rep("numeric",39)))
summary(weekly1)
str(weekly1)
setAs("character","myDate", function(from) as.Date(from, format="%m/%d/%Y") )
#Coerce ACV into numbers without commas (I also removed all $ from the actual spreasheet)
setAs("character", "num_with_commas",
function(from) as.numeric(gsub(",", "", from) ) )
setwd("~/Workspace/BetterCloud_R/chi")
historic <- read.csv("historic/CHI Historic - Brad - Clean - Sheet1.csv", header = TRUE, stringsAsFactors = FALSE,
colClasses = c("character", "myDate", "numeric", "num_with_commas", rep("numeric", 18)))
summary(historic)
str(historic)
weekly3 <- read.csv("high_low/data/01:04:2014.csv", header = TRUE, colClasses=c("character",
"numeric",
"num_with_commas",
"myDate",
rep("numeric",11),
"myDate", rep("numeric",39)))
weekly1 <- read.csv("high_low/data/12:21:2014.csv", header = TRUE, colClasses=c("character",
"numeric",
"num_with_commas",
"myDate",
rep("numeric",11),
"myDate", rep("numeric",39)))
weekly2 <- read.csv("high_low/data/12:28:2014.csv", header = TRUE, colClasses=c("character",
"numeric",
"num_with_commas",
"myDate",
rep("numeric",11),
"myDate", rep("numeric",39)))
summary(weekly1)
str(weekly1)
library(plyr)
set.seed(13435)
x <- data.frame("var1"=sample(1:5), "var2"=sample(6:10), "var3"=sample(11:15))
x <- x[sample(1:5),];x$var2[c(1,3)] = NA
x
arrange(x, x$var2)
arrange(x, desc(x$var2)
arrange(x, desc(x$var2))
arrange(x, desc(x$var2))
options(java.parameters = "-Xms2048m")
options(java.parameters = "-Xmx8000m")
setwd("~/Workspace/BC/read_write")
#Coerce date strings into date objects
setAs("character","date", function(from) as.Date(from, format="%m/%d/%Y") )
#Coerce ACV into numbers without commas (I also removed all # from the actual spreasheet)
setAs("character", "num_strip_dollar_comma",
function(from) as.numeric(gsub("\\$", "", gsub(",", "", from) )))
#Some of the read/write data seems to have quotes so I'm stripping that as wel
setAs("character", "num_strip_quote",
function(from) as.numeric(gsub('"', "", from)))
)
data <- read.csv("namespace_data.csv", header=TRUE, stringsAsFactors = FALSE, na.strings = c("NA", ""),
colClasses = c(rep("character", 3),
rep("num_strip_quote", 4),
rep("num_strip_dollar_comma", 3),
rep("character", 3),
"num_strip_dollar_comma",
rep("character", 4),
"num_strip_dollar_comma",
"date"))
basic <- data[data$Flashpanel.Version == "Basic",]
partner <- data[data$Flashpanel.Version == "Partner",]
trial <- data[data$Flashpanel.Version == "Enterprise Trial",]
enterprise <- data[data$Flashpanel.Version == "Enterprise",]
mean_basic_entities_writting<- mean(basic$num_entities_written, na.rm = TRUE)
summary(basic)
setAs("character","myDate", function(from) as.Date(from, format="%m/%d/%Y") )
#Coerce ACV into numbers without commas (I also removed all $ from the actual spreasheet)
setAs("character", "num_with_commas",
function(from) as.numeric(gsub(",", "", from) ) )
setwd("~/Workspace/BC/chi")
historic <- read.csv("historic/CHI Historic - Brad - Clean - Sheet1.csv", header = TRUE, stringsAsFactors = FALSE,
colClasses = c("character", "myDate", "numeric", "num_with_commas", rep("numeric", 18)))
summary(historic)
str(historic)
weekly3 <- read.csv("high_low/data/01:04:2014.csv", header = TRUE, colClasses=c("character",
"numeric",
"num_with_commas",
"myDate",
rep("numeric",11),
"myDate", rep("numeric",39)))
weekly1 <- read.csv("high_low/data/12:21:2014.csv", header = TRUE, colClasses=c("character",
"numeric",
"num_with_commas",
"myDate",
rep("numeric",11),
"myDate", rep("numeric",39)))
weekly2 <- read.csv("high_low/data/12:28:2014.csv", header = TRUE, colClasses=c("character",
"numeric",
"num_with_commas",
"myDate",
rep("numeric",11),
"myDate", rep("numeric",39)))
summary(weekly1)
str(weekly1)
setwd("~/Workspace/BC/chi/high_low")
get_chi_info_for_domains <- function(domains_list) {
#Coerce date strings into date objects
setAs("character","myDate", function(from) as.Date(from, format="%d/%m/%Y") )
#Coerce ACV into numbers without commas (I also removed all # from the actual spreasheet)
setAs("character", "num_with_commas",
function(from) as.numeric(gsub(",", "", from) ) )
#Read the data
spreadsheets <- list.files("high_low", full.names = TRUE, include.dirs = TRUE)
#Run all domains on a particular spreadsheet
#spreadsheet_1 <- read.csv(spreadsheets[1], stringsAsFactors = FALSE)
#domains_list <- spreadsheet_1$Domain
m <- data.frame(matrix(nrow = length(domains_list), ncol = 5))
for(i in 1:length(spreadsheets)){
df <- read.csv(spreadsheets[i], header = TRUE, colClasses=c("character",
"numeric",
"num_with_commas",
"myDate",
rep("numeric",11),
"myDate", rep("numeric",39)))
for(j in 1:length(domains_list)){
chi <- df$CHI[df$Domain == domains_list[j]]
row <- subset(m , m[,1] == domains_list[j])
if(nrow(row) == 1){
max_chi <- row[3]
min_chi <- row[5]
} else {
max_chi <- 0
min_chi <- 1000
}
if(chi > max_chi){
max_chi <- chi
max_chi_date <- spreadsheets[i]
}
if(chi < min_chi){
min_chi <- chi
min_chi_date <- spreadsheets[i]
}
m[j,1] <- domains_list[j]
m[j,2] <- max_chi_date
m[j,3] <- max_chi
m[j,4] <- min_chi_date
m[j,5] <- min_chi
}
}
colnames(m) <- c("Domain", "Max CHI Date","Max CHI", "Min CHI Date","Min CHI")
m
}
#Some basic plots
#plot(ch$Days.Since.Last.Login, ch$X.Scheduled.Policies)
#plot(ch$Days.Since.Last.Login, ch$X.Scheduled.reports)
#plot(ch$X..of.Admins.Active, ch$X..of.Access.Roles, log = "x")
get_chi_info_for_domains("brp.com")
setwd("~/Workspace/BC/chi/")
get_chi_info_for_domains <- function(domains_list) {
#Coerce date strings into date objects
setAs("character","myDate", function(from) as.Date(from, format="%d/%m/%Y") )
#Coerce ACV into numbers without commas (I also removed all # from the actual spreasheet)
setAs("character", "num_with_commas",
function(from) as.numeric(gsub(",", "", from) ) )
#Read the data
spreadsheets <- list.files("high_low/data", full.names = TRUE, include.dirs = TRUE)
#Run all domains on a particular spreadsheet
#spreadsheet_1 <- read.csv(spreadsheets[1], stringsAsFactors = FALSE)
#domains_list <- spreadsheet_1$Domain
m <- data.frame(matrix(nrow = length(domains_list), ncol = 5))
for(i in 1:length(spreadsheets)){
df <- read.csv(spreadsheets[i], header = TRUE, colClasses=c("character",
"numeric",
"num_with_commas",
"myDate",
rep("numeric",11),
"myDate", rep("numeric",39)))
for(j in 1:length(domains_list)){
chi <- df$CHI[df$Domain == domains_list[j]]
row <- subset(m , m[,1] == domains_list[j])
if(nrow(row) == 1){
max_chi <- row[3]
min_chi <- row[5]
} else {
max_chi <- 0
min_chi <- 1000
}
if(chi > max_chi){
max_chi <- chi
date <- spreadsheets[i]
date <- gsub("high_low/", "", date)
date <- gsub(".csv", "", date)
date <- as.Date(date, "%m:%d:%Y")
max_chi_date <- as.character(date)
}
if(chi < min_chi){
min_chi <- chi
date <- spreadsheets[i]
date <- gsub("high_low/", "", date)
date <- gsub(".csv", "", date)
date <- as.Date(date, "%m:%d:%Y")
min_chi_date <- as.character(date)
}
m[j,1] <- domains_list[j]
m[j,2] <- max_chi_date
m[j,3] <- max_chi
m[j,4] <- min_chi_date
m[j,5] <- min_chi
}
}
colnames(m) <- c("Domain", "Max CHI Date","Max CHI", "Min CHI Date","Min CHI")
m
}
#Some basic plots
#plot(ch$Days.Since.Last.Login, ch$X.Scheduled.Policies)
#plot(ch$Days.Since.Last.Login, ch$X.Scheduled.reports)
#plot(ch$X..of.Admins.Active, ch$X..of.Access.Roles, log = "x")
get_chi_info_for_domains("brp.com")
setwd("~/Workspace/BC/chi/")
get_chi_info_for_domains <- function(domains_list) {
#Coerce date strings into date objects
setAs("character","myDate", function(from) as.Date(from, format="%d/%m/%Y") )
#Coerce ACV into numbers without commas (I also removed all # from the actual spreasheet)
setAs("character", "num_with_commas",
function(from) as.numeric(gsub(",", "", from) ) )
#Read the data
spreadsheets <- list.files("high_low/data", full.names = TRUE, include.dirs = TRUE)
#Run all domains on a particular spreadsheet
#spreadsheet_1 <- read.csv(spreadsheets[1], stringsAsFactors = FALSE)
#domains_list <- spreadsheet_1$Domain
m <- data.frame(matrix(nrow = length(domains_list), ncol = 5))
for(i in 1:length(spreadsheets)){
df <- read.csv(spreadsheets[i], header = TRUE, colClasses=c("character",
"numeric",
"num_with_commas",
"myDate",
rep("numeric",11),
"myDate", rep("numeric",39)))
for(j in 1:length(domains_list)){
chi <- df$CHI[df$Domain == domains_list[j]]
row <- subset(m , m[,1] == domains_list[j])
if(nrow(row) == 1){
max_chi <- row[3]
min_chi <- row[5]
} else {
max_chi <- 0
min_chi <- 1000
}
if(chi > max_chi){
max_chi <- chi
date <- spreadsheets[i]
date <- gsub("high_low/data/", "", date)
date <- gsub(".csv", "", date)
date <- as.Date(date, "%m:%d:%Y")
max_chi_date <- as.character(date)
}
if(chi < min_chi){
min_chi <- chi
date <- spreadsheets[i]
date <- gsub("high_low/data/", "", date)
date <- gsub(".csv", "", date)
date <- as.Date(date, "%m:%d:%Y")
min_chi_date <- as.character(date)
}
m[j,1] <- domains_list[j]
m[j,2] <- max_chi_date
m[j,3] <- max_chi
m[j,4] <- min_chi_date
m[j,5] <- min_chi
}
}
colnames(m) <- c("Domain", "Max CHI Date","Max CHI", "Min CHI Date","Min CHI")
m
}
#Some basic plots
#plot(ch$Days.Since.Last.Login, ch$X.Scheduled.Policies)
#plot(ch$Days.Since.Last.Login, ch$X.Scheduled.reports)
#plot(ch$X..of.Admins.Active, ch$X..of.Access.Roles, log = "x")
get_chi_info_for_domains("brp.com")
setwd("~/Workspace/BC/chi/historic")
#Coerce date strings into date objects
setAs("character","myDate", function(from) as.Date(from, format="%m/%d/%Y") )
#Coerce ACV into numbers without commas (I also removed all # from the actual spreasheet)
setAs("character", "num_with_commas",
function(from) as.numeric(gsub(",", "", from) ) )
df <- read.csv("CHI Historic - Brad - Clean - Sheet1.csv", header = TRUE, stringsAsFactors = FALSE,
colClasses = c("character", "myDate", "numeric", "num_with_commas", rep("numeric", 18)))
domain <- "newks.com"
domain2 <- "brp.com"
customer <- df[df$Domain.Name == domain,]
customer2 <- df[df$Domain.Name == domain2,]
unclean_dates <- names(customer[,c(5:22)])
dates <- as.Date(gsub("X", "", names(customer[,c(5:22)])), "%m.%d.%Y")
values <- as.numeric(customer[1, c(5:22)])
values2 <- as.numeric(customer2[1, c(5:22)])
plot(values~dates, type="l",col="red", axes=FALSE)
plot(values2~dates, type="l",col="blue", axes=FALSE)
box()
title(main = "Time Plot of CHI", sub = domain)
axis(1, dates, format(dates, "%m-%y"))
axis(2, values)
setwd("~/Coursera/Cleaning_Data/Quiz_2")
myapp <- oauth_app("github",key="f4a0559a529d341e8964",secret = "6cabb8b2ea01d6d0659266adbea7baab157070d9")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
myapp <- oauth_app("github",key="f4a0559a529d341e8964",secret = "6cabb8b2ea01d6d0659266adbea7baab157070d9")
library(httr)
require(httr)
library(httpuv)
myapp <- oauth_app("github",key="f4a0559a529d341e8964",secret = "6cabb8b2ea01d6d0659266adbea7baab157070d9")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library("httpuv")
??oauth2.0_token
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
?demo
install.packages("httpuv")
library("httpuv")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
gtoken
get_respon <- GET("https://api.github.com/users/jtleek/repos/events")
get_respon
get_respon <- GET("https://api.github.com/users/jtleek/repos")
get_respon
json_resp <- content(get_respon)
json_resp
json_resp2 <- jsonlite::fromJSON(toJSON(json1))
json_resp[1]
json_resp[1]$name
json_resp[1]
json_resp[[1]]
json_resp[1][1]
json_resp[[1]][1]
json_resp[[1]][2]
json_resp[[2]][2]
json_resp[[3]][2]
json_resp[[4]][2]
json_resp[[5]][2]
json_resp[[5]]
