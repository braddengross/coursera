calc_sample <- function(population, mean){
}
calc_sample <- function(population, size){
samp <- sample(population, size)
samp_mean[i] <- mean(samp)
samp_sd[i] <- sd(samp)
}
for(i in 1:50){
calc_sample(ames$Gr.Liv.Area, n)
}
calc_sample <- function(population, size){
samp <- sample(population, size)
samp_mean[i] <- mean(samp)
samp_sd[i] <- sd(samp)
}
for(i in 1:50){
calc_sample(ames$Gr.Liv.Area, n)
}
for(i in 1:50){
calc_sample(ames$Gr.Liv.Area, n)
}
for(i in 1:50){
calc_sample(ames$Gr.Liv.Area, n)
}
calc_sample <- function(population, size){
samp <- sample(population, size)
samp_mean[i] <- mean(samp)
samp_sd[i] <- sd(samp)
}
for(i in 1:50){
calc_sample(ames$Gr.Liv.Area, n)
}
for(i in 1:50){
#calc_sample(ames$Gr.Liv.Area, n)
samp <- sample(population, size)
samp_mean[i] <- mean(samp)
samp_sd[i] <- sd(samp)
}
for(i in 1:50){
#calc_sample(ames$Gr.Liv.Area, n)
samp <- sample(ames$Gr.Liv.Area, n)
samp_mean[i] <- mean(samp)
samp_sd[i] <- sd(samp)
}
for(i in 1:50){
print(i)
calc_sample(ames$Gr.Liv.Area, 60)
}
calc_sample <- function(population, size, samp_mean, samp_sd){
samp <- sample(population, size)
samp_mean[i] <- mean(samp)
samp_sd[i] <- sd(samp)
}
for(i in 1:50){
print(i)
calc_sample(ames$Gr.Liv.Area, 60, samp_mean, samp_sd)
}
calc_lower <- function(samp_mean, samp_sd, size){
samp_mean - 1.96 * samp_sd/sqrt(size)
}
lower <- calc_lower(samp_mean, samp_sd, size)
lower <- calc_lower(samp_mean, samp_sd, n)
calc_higher <- function(samp_mean, samp_sd, size){
samp_mean + 1.96 * samp_sd/sqrt(size)
}
higher <- calc_higher(samp_mean, samp_sd, n)
c(lower[1], higher[1])
plot_ci(lower, higher, mean(population))
?plot_ci
??plot_ci
plot_ci
?plot
lower <- calc_lower(samp_mean, samp_sd, n)
higher <- calc_higher(samp_mean, samp_sd, n)
c(lower[1], higher[1])
plot_ci(lower, higher, mean(population))
plot_ci(lower, higher, mean(population))
lower <- calc_lower(samp_mean, samp_sd, n)
higher <- calc_higher(samp_mean, samp_sd, n)
c(lower[1], higher[1])
plot_ci(lower, higher, mean(population))
samp_mean - 1.68 * samp_sd/sqrt(size)
calc_lower <- function(samp_mean, samp_sd, size){
samp_mean - 1.68 * samp_sd/sqrt(size)
}
calc_higher <- function(samp_mean, samp_sd, size){
samp_mean + 1.68 * samp_sd/sqrt(size)
}
lower <- calc_lower(samp_mean, samp_sd, n)
higher <- calc_higher(samp_mean, samp_sd, n)
c(lower[1], higher[1])
plot_ci(lower, higher, mean(population))
calc_lower <- function(samp_mean, samp_sd, size){
samp_mean - 1.99 * samp_sd/sqrt(size)
}
calc_higher <- function(samp_mean, samp_sd, size){
samp_mean + 1.99 * samp_sd/sqrt(size)
}
lower <- calc_lower(samp_mean, samp_sd, n)
higher <- calc_higher(samp_mean, samp_sd, n)
c(lower[1], higher[1])
plot_ci(lower, higher, mean(population))
calc_lower <- function(samp_mean, samp_sd, size){
samp_mean - 1.99 * samp_sd/sqrt(size)
}
calc_higher <- function(samp_mean, samp_sd, size){
samp_mean + 1.99 * samp_sd/sqrt(size)
}
lower <- calc_lower(samp_mean, samp_sd, n)
higher <- calc_higher(samp_mean, samp_sd, n)
c(lower[1], higher[1])
plot_ci(lower, higher, mean(population))
plot_ci
download.file("http://www.openintro.org/stat/data/nc.RData", destfile = "nc.RData")
load("nc.RData")
download.file("http://www.openintro.org/stat/data/nc.RData", destfile = "nc.RData")
load("nc.RData")
head(nc)
summary(nc)
summary(nc)
?plot
?boxplot
boxplot(nc$habit, nc$weight)
boxplot(nc$weight, nc$habit)
by(nc$weight, nc$habit, mean)
?boxplot
boxplot(nc$habit='nonsmoker', nc$weight)
boxplot(nc$habit=='nonsmoker', nc$weight)
boxplot(nc$weight~nc$habit, data=nc)
?~
by(nc$weight, nc$habit, mean)
boxplot(x~y, data = nc)
boxplot(nc$weight~nc$habit, data = nc)
boxplot(nc$habit~nc$weigth, data = nc)
?boxplot
boxplot(nc$weight~nc$habit, data = nc)
by(nc$weight, nc$habit, mean)
by(nc$weight, nc$habit, length)
inference(data = nc$weight, group=nc$habit, est = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
formals(inference)
inference(x = nc$weight, y=nc$habit, est = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
inference(y = nc$weight, x=nc$habit, est = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
.32 * .32
inference(y = nc$weight, x=nc$habit, est = "mean", type = "ci", null = 0,
inference(y = nc$weight, x=nc$habit, est = "mean", type = "ci", null = 0,
alternative = "twosided", method = "theoretical")
inference
inference(y = nc$weight, x=nc$habit, est = "mean", type = "ci", null = 0,
alternative = "twosided", method = "theoretical", order=c("smoker", "nonsmoker"))
inference(y=nc$weeks, est = "mean", type ="ci", null = 0, alternative = "twosided", method="theoretical"
inference(y=nc$weeks, est = "mean", type ="ci", null = 0, alternative = "twosided", method="theoretical")
weeks_mean <- mean(nc$weeks)
?mean
weeks_mean <- mean(nc$weeks, na.rm = TRUE)
weeks_sd <- sd(nc$weeks)
weeks_sd <- sd(nc$weeks, na.rm = TRUE)
se <- weeks_sd / sqrt(length(weeks))
se <- weeks_sd / sqrt(length(nc$weeks))
upper <- weeks_mean + 1.96 * se
lower <- weeks_mean - 1.96 * se
?sample
max(nc$mage)
?max
max(subset(nc$mage, nc$mature="young mother"))
max(subset(nc$mage, nc$mature=="young mother"))
head(nc$mature)
max(subset(nc$mage, nc$mature=="younger mom"))
max(subset(nc$mage, nc$mature=="mature mom"))
#Max age for mature and youner mom
min(subset(nc$mage, nc$mature=="mature mom"))
?strptime
?strptime
?rnorm
day.start <- "2012/10/01"
day.end <- "2012/12/31"
dayseq <- seq.Date(as.Date(day.start),as.Date(day.end),by="week")
time_analysis_sample_data <- data.frame(
dayseq,
domain = rep("test.cloud8labs", length(dayseq))
version = c(rep("Basic", 5), rep("Pro", 5), rep("Enterprise", 5))
)
day.start <- "2012/10/01"
day.end <- "2012/12/31"
dayseq <- seq.Date(as.Date(day.start),as.Date(day.end),by="week")
time_analysis_sample_data <- data.frame(
dayseq,
domain = rep("test.cloud8labs", length(dayseq)),
version = c(rep("Basic", 5), rep("Pro", 5), rep("Enterprise", 5))
)
day.start <- "2012/10/01"
day.end <- "2012/12/31"
dayseq <- seq.Date(as.Date(day.start),as.Date(day.end),by="week")
time_analysis_sample_data <- data.frame(
dayseq,
domain = rep("test.cloud8labs", length(dayseq)),
version = c(rep("Basic", 5), rep("Pro", 5), rep("Enterprise", 4))
)
View(time_analysis_sample_data)
day.start <- "2012/10/01"
day.end <- "2012/12/31"
dayseq <- seq.Date(as.Date(day.start),as.Date(day.end),by="week")
time_analysis_sample_data <- data.frame(
dayseq,
domain = rep("test.cloud8labs", length(dayseq)),
version = c(rep("Trial", 5), rep("Basic", 5), rep("Enterprise", 4))
)
View(time_analysis_sample_data)
day.start <- "2012/10/01"
day.end <- "2013/01/06"
dayseq <- seq.Date(as.Date(day.start),as.Date(day.end),by="week")
time_analysis_sample_data <- data.frame(
dayseq,
domain = rep("test.cloud8labs", length(dayseq)),
version = c(rep("Trial", 5), rep("Basic", 5), rep("Enterprise", 5))
)
day.start <- "2012/10/01"
day.end <- "2013/01/07"
dayseq <- seq.Date(as.Date(day.start),as.Date(day.end),by="week")
time_analysis_sample_data <- data.frame(
dayseq,
domain = rep("test.cloud8labs", length(dayseq)),
version = c(rep("Trial", 5), rep("Basic", 5), rep("Enterprise", 5))
)
day.start <- "2012/10/01"
day.end <- "2013/01/07"
dayseq <- seq.Date(as.Date(day.start),as.Date(day.end),by="week")
weeks = length(dayseq)
time_analysis_sample_data <- data.frame(
dayseq,
domain = rep("test.cloud8labs", weeks),
version = c(rep("Trial", weeks / 3), rep("Basic", weeks / 3), rep("Enterprise", weeks / 3))
)
weeks = length(dayseq)
time_analysis_sample_data <- data.frame(
dayseq,
domain = rep("test.cloud8labs", weeks),
version = c(rep("Trial", weeks / 3), rep("Basic", weeks / 3), rep("Enterprise", weeks / 3))
reports_count = c(0, rep(1, 3), rep(3, 8), rep(5, 3))
)
day.start <- "2012/10/01"
day.end <- "2013/01/07"
dayseq <- seq.Date(as.Date(day.start),as.Date(day.end),by="week")
weeks = length(dayseq)
time_analysis_sample_data <- data.frame(
dayseq,
domain = rep("test.cloud8labs", weeks),
version = c(rep("Trial", weeks / 3), rep("Basic", weeks / 3), rep("Enterprise", weeks / 3)),
reports_count = c(0, rep(1, 3), rep(3, 8), rep(5, 3))
)
View(time_analysis_sample_data)
time_analysis_sample_data <- data.frame(
dayseq,
domain = rep("test.cloud8labs", weeks),
version = c(rep("Trial", weeks / 3), rep("Basic", weeks / 3), rep("Enterprise", weeks / 3)),
reports_count = c(0, rep(1, 3), rep(3, 8), rep(5, 3)),
man_syncs_run = c(3, 2, 4, rep(0, 3), rep(2, 3))
)
time_analysis_sample_data <- data.frame(
dayseq,
domain = rep("test.cloud8labs", weeks),
version = c(rep("Trial", weeks / 3), rep("Basic", weeks / 3), rep("Enterprise", weeks / 3)),
reports_count = c(0, rep(1, 3), rep(3, 8), rep(5, 3)),
man_syncs_run = c(3, 2, 2, 3, 4, rep(0, 5), rep(2, 5))
)
View(time_analysis_sample_data)
time_analysis_sample_data <- data.frame(
dayseq,
domain = rep("test.cloud8labs", weeks),
version = c(rep("Trial", weeks / 3), rep("Basic", weeks / 3), rep("Enterprise", weeks / 3)),
edu_non_prof = c(rep(FALSE, 15)),
reports_count = c(0, rep(1, 3), rep(3, 8), rep(5, 3)),
man_syncs_run = c(3, 2, 2, 3, 4, rep(0, 5), rep(2, 5)),
drive_policies_conut = c(rep(0, 2), rep(1, 8), rep(2, 5))
)
View(time_analysis_sample_data)
View(time_analysis_sample_data)
weeks_as_enterprise <- time_analysis_sample_data[time_analysis_sample_data$version == "Enterprise"]
weeks_as_enterprise <- time_analysis_sample_data[time_analysis_sample_data$version == "Enterprise", ]
View(weeks_as_enterprise)
?order
weeks_as_enterprise <- weeks_as_enterprise[order(weeks_as_enterprise$dayseq, decreasing = TRUE),]
View(weeks_as_enterprise)
weeks_as_enterprise <- weeks_as_enterprise[order(weeks_as_enterprise$dayseq),]
View(weeks_as_enterprise)
find_conversion_point <- function(time_analysis_sample_data){
weeks_as_enterprise <- time_analysis_sample_data[time_analysis_sample_data$version == "Enterprise", ]
weeks_as_enterprise <- weeks_as_enterprise[order(weeks_as_enterprise$dayseq),]
conversion_week <- weeks_as_enterprise[1]
}
find_conversion_point(time_analysis_sample_data)
conv_date <- find_conversion_point(time_analysis_sample_data)
conv_date
find_conversion_point <- function(time_analysis_sample_data){
weeks_as_enterprise <- time_analysis_sample_data[time_analysis_sample_data$version == "Enterprise", ]
weeks_as_enterprise <- weeks_as_enterprise[order(weeks_as_enterprise$dayseq),]
conversion_week <- weeks_as_enterprise[1]
}
conv_date
conv_date <- find_conversion_point(time_analysis_sample_data)
conv_date
find_conversion_point <- function(time_analysis_sample_data){
weeks_as_enterprise <- time_analysis_sample_data[time_analysis_sample_data$version == "Enterprise", ]
weeks_as_enterprise <- weeks_as_enterprise[order(weeks_as_enterprise$dayseq),]
conversion_week <- weeks_as_enterprise[1]
conversion_week
}
conv_date <- find_conversion_point(time_analysis_sample_data)
conv_date
View(weeks_as_enterprise)
find_conversion_point <- function(time_analysis_sample_data){
weeks_as_enterprise <- time_analysis_sample_data[time_analysis_sample_data$version == "Enterprise", ]
weeks_as_enterprise <- weeks_as_enterprise[order(weeks_as_enterprise$dayseq),]
conversion_week <- weeks_as_enterprise[1,]
conversion_week
}
conv_date <- find_conversion_point(time_analysis_sample_data)
conv_date
?seq.Date
dates <- seq.Date(from = conv_date, by = "-1 week", length.out = weeks)
View(conv_date)
dates <- seq.Date(from = conv_date$dayseq, by = "-1 week", length.out = weeks)
dates
View(conv_date)
dates <- seq.Date(from = conv_date$dayseq, by = "-1 week", length.out = 1)
dates
dates <- seq.Date(from = conv_date$dayseq, by = "-1 week", length.out = 4)
dates
find_difs_in_weeks_leading_up_to_conversion <- function(time_analysis_sample_data, weeks = 4) {
conv_date <- find_conversion_point(time_analysis_sample_data)
dates <- seq.Date(from = conv_date$dayseq, by = "-1 week", length.out = weeks)
dates
}
find_difs_in_weeks_leading_up_to_conversion(time_analysis_sample_data, 2)
find_difs_in_weeks_leading_up_to_conversion(time_analysis_sample_data, 4)
find_difs_in_weeks_leading_up_to_conversion(time_analysis_sample_data, 6)
find_difs_in_weeks_leading_up_to_conversion <- function(time_analysis_sample_data, weeks = 4) {
conv_date <- find_conversion_point(time_analysis_sample_data)
dates <- seq.Date(from = conv_date$dayseq, by = "-1 week", length.out = weeks)
data_leading_up_to_conversion <- time_analysis_sample_data[time_analysis_sample_data$dayseq %in% dates,]
data_leading_up_to_conversion
}
find_difs_in_weeks_leading_up_to_conversion(time_analysis_sample_data, 1)
find_difs_in_weeks_leading_up_to_conversion(time_analysis_sample_data, 2)
?rbind
data_leading_to_conversion <- function(time_analysis_sample_data, weeks = 4, include_conversion = FALSE) {
conv_date <- find_conversion_point(time_analysis_sample_data)
dates <- seq.Date(from = conv_date$dayseq, by = "-1 week", length.out = weeks)
data_leading_up_to_conversion <- time_analysis_sample_data[time_analysis_sample_data$dayseq %in% dates,]
if(include_conversion){
data_leading_up_to_conversion <- rbind(conv_date, data_leading_up_to_conversion)
}
data_leading_up_to_conversion
}
data_leading_up_to_conversion(time_analysis_sample_data)
data_leading_to_conversion(time_analysis_sample_data)
data_leading_to_conversion(time_analysis_sample_data, include_conversion = TRUE)
data_leading_to_conversion <- function(time_analysis_sample_data, weeks = 4) {
conv_date <- find_conversion_point(time_analysis_sample_data)
dates <- seq.Date(from = conv_date$dayseq, by = "-1 week", length.out = weeks)
data_leading_up_to_conversion <- time_analysis_sample_data[time_analysis_sample_data$dayseq %in% dates,]
data_leading_up_to_conversion
}
data_leading_to_conversion(time_analysis_sample_data)
conversion_data <- data_leading_to_conversion(time_analysis_sample_data)
mean(conversion_data$man_syncs_run)
sum(conversion_data$man_syncs_run) - mean(conversion_data$man_syncs_run)
sum(conversion_data$reports_count) - mean(conversion_data$reports_count)
average(conversion_data$reports_count) - mean(conversion_data$reports_count)
?Ave
?ave
ave(conversion_data$reports_count) - mean(conversion_data$reports_count)
mean(conversion_data$reports_count) - median(conversion_data$reports_count)
mean(conversion_data$man_syncs_run) - median(conversion_data$man_syncs_run)
library(httr)
install.packages("RForcecom", dependencies = TRUE)
library(jsonlite)
library("RForcecom")
options(stringsAsFactors = FALSE)
accounts_json <- GET("https://bettercloud.evergage.com/api/dataset/engage/accounts.json?_at=C2C0FC23-4A2A-9D7D-A831-E4B10644399D")
account_json_content <- content(accounts_json)
account_json_exposed <- jsonlite::fromJSON(toJSON(account_json_content))
#Load libraries and default stringsAsFactosToFalse
library(httr)
install.packages("RForcecom", dependencies = TRUE)
library(jsonlite)
library("RForcecom")
options(stringsAsFactors = FALSE)
install.packages("RForcecom", dependencies = TRUE)
accounts_json_resp <- GET("https://bettercloud.evergage.com/api/dataset/engage/accounts.json?_at=C2C0FC23-4A2A-9D7D-A831-E4B10644399D")
account_json_content <- content(accounts_json_resp)
account_json <- jsonlite::fromJSON(toJSON(account_json_content))
library(jsonlite)
library(httr)
install.packages("RForcecom", dependencies = TRUE)
library(jsonlite)
R.Version()
R.Version()
library(httr)
install.packages("RForcecom", dependencies = TRUE)
library(jsonlite)
R.library("RForcecom")
options(stringsAsFactors = FALSE)
library("RForcecom")
accounts_json_resp <- GET("https://bettercloud.evergage.com/api/dataset/engage/accounts.json?_at=C2C0FC23-4A2A-9D7D-A831-E4B10644399D")
account_json_content <- content(accounts_json_resp)
account_json <- jsonlite::fromJSON(toJSON(account_json_content))
username <- "david.hardwick@bettercloud.com.sandbox"
password <- "B3tterc!oud2013gd6hCzFDyaw9HQetrPEy1dqr2"
instanceURL <- "https://cs9.salesforce.com/"
apiVersion <- "27.0"
session <- rforcecom.login(username, password, instanceURL, apiVersion)
soql_query <- "SELECT Name, Flashpanel_Version__c, last_login__c, num_saved_report__c, num_scheduled_policies__c, num_scheduled_report__c FROM Account"
query_result <- rforcecom.query(session, soql_query)
query_result <- query_result[!is.na(query_result$last_login__c),]
domains <- query_result$Name
View(account_json)
View(query_result)
evergage_data_for_sf_accounts <- account_json_exposed[account_json_exposed$name %in% domains,]
evergage_domains <- evergage_data_for_sf_accounts$name
evergage_data_for_sf_accounts$name <- lapply(evergage_data_for_sf_accounts$name, as.character)
evergage_data_for_sf_accounts$totalActions <- lapply(evergage_data_for_sf_accounts$totalActions, as.numeric)
evergage_data_for_sf_accounts <- account_json_exposed[account_json_exposed$name %in% domains,]
evergage_data_for_sf_accounts <- account_json_exposed[account_json$name %in% domains,]
evergage_data_for_sf_accounts <- account_json[account_json$name %in% domains,]
evergage_domains <- evergage_data_for_sf_accounts$name
evergage_data_for_sf_accounts$name <- lapply(evergage_data_for_sf_accounts$name, as.character)
evergage_data_for_sf_accounts$totalActions <- lapply(evergage_data_for_sf_accounts$totalActions, as.numeric)
evergage_data_for_sf_accounts$name <- unlist(evergage_data_for_sf_accounts$name)
evergage_data_for_sf_accounts$totalActions <- unlist(evergage_data_for_sf_accounts$totalActions)
query_result <- query_result[query_result$Name %in% evergage_data_for_sf_accounts$name,]
View(evergage_data_for_sf_accounts)
View(query_result)
query_result$Name <- as.character(query_result$Name)
query_result <-query_result[order(query_result$Name), ]
View(evergage_data_for_sf_accounts)
View(query_result)
data <- data.frame(evergage_data_for_sf_accounts$name, evergage_data_for_sf_accounts$totalActions, query_result$Name,
query_result$last_login__c, query_result$num_saved_report__c,
query_result$num_scheduled_policies__c, query_result$num_scheduled_report__c)
colnames(data) <- c("E - Name", "E - Total Actions", "S - Name", "S - Last Login", "S - Saved Report Count", "S - Scheduled Policy Count", "S - Scheduled Report Count")
View(data)
day.start <- "2012/10/01"
day.end <- "2013/01/07"
dayseq <- seq.Date(as.Date(day.start),as.Date(day.end),by="week")
weeks = length(dayseq)
time_analysis_sample_data <- data.frame(
dayseq,
domain = rep("test.cloud8labs", weeks),
version = c(rep("Trial", weeks / 3), rep("Basic", weeks / 3), rep("Enterprise", weeks / 3)),
edu_non_prof = c(rep(FALSE, 15)),
reports_count = c(0, rep(1, 3), rep(3, 8), rep(5, 3)),
man_syncs_run = c(3, 2, 2, 3, 4, rep(0, 5), rep(2, 5)),
drive_policies_conut = c(rep(0, 2), rep(1, 8), rep(2, 5))
)
View(time_analysis_sample_data)
find_trial_end <- fucntion(time_analysis_sample_data) {
weeks_as_trial <- time_analysis_sample_data[time_analysis_sample_data$version == "Trial", ]
weeks_as_trial <- weeks_as_trial[order(weeks_as_trial$dayseq),]
trial_end_week <- weeks_as_trial[nrow(weeks_as_trial),]
trial_end_week
}
find_conversion_point <- function(time_analysis_sample_data){
weeks_as_enterprise <- time_analysis_sample_data[time_analysis_sample_data$version == "Enterprise", ]
weeks_as_enterprise <- weeks_as_enterprise[order(weeks_as_enterprise$dayseq),]
conversion_week <- weeks_as_enterprise[1,]
conversion_week
}
data_leading_to_conversion <- function(time_analysis_sample_data, weeks = 4) {
conv_date <- find_conversion_point(time_analysis_sample_data)
dates <- seq.Date(from = conv_date$dayseq, by = "-1 week", length.out = weeks)
data_leading_up_to_conversion <- time_analysis_sample_data[time_analysis_sample_data$dayseq %in% dates,]
data_leading_up_to_conversion
}
find_trial_end <- fucntion(time_analysis_sample_data) {
weeks_as_trial <- time_analysis_sample_data[time_analysis_sample_data$version == "Trial", ]
weeks_as_trial <- weeks_as_trial[order(weeks_as_trial$dayseq),]
trial_end_week <- weeks_as_trial[nrow(weeks_as_trial),]
trial_end_week
}
find_trial_end <- function(time_analysis_sample_data) {
weeks_as_trial <- time_analysis_sample_data[time_analysis_sample_data$version == "Trial", ]
weeks_as_trial <- weeks_as_trial[order(weeks_as_trial$dayseq),]
trial_end_week <- weeks_as_trial[nrow(weeks_as_trial),]
trial_end_week
}
library(httr)
install.packages("RForcecom", dependencies = TRUE)
library(jsonlite)
library("RForcecom")
options(stringsAsFactors = FALSE)
install.packages("RForcecom", dependencies = TRUE)
accounts_json_resp <- GET("https://bettercloud.evergage.com/api/dataset/engage/accounts.json?_at=C2C0FC23-4A2A-9D7D-A831-E4B10644399D")
account_json_content <- content(accounts_json_resp)
account_json <- jsonlite::fromJSON(toJSON(account_json_content))
setwd("~/Workspace/Coursera/Cleaning_Data/week_2")
install.packages("RMySQL")
require("RMySQL")
?dbConnect
ucscDB <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucsb, "show databases;"); dbDisconnect(ucscDB);
result <- dbGetQuery(ucscDB, "show databases;"); dbDisconnect(ucscDB);
result
hg19 <- dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
all_tables <- dbListTables(hg10)
all_tables <- dbListTables(hg19)
length(all_tables)
all_tables[1:5]
dbListFields(hg19, "affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
